apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "pihole.fullname" . }}
  labels:
    app: {{ template "pihole.name" . }}
    chart: {{ template "pihole.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ template "pihole.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "pihole.name" . }}
        release: {{ .Release.Name }}
    spec:
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
        - 127.0.0.1
        - 8.8.8.8 
      containers:
        - env:
          - name: WEBPASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: {{ template "pihole.fullname" . }}-password
          name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 53
            name: dns
            protocol: TCP
          - containerPort: 53
            name: dns-udp
            protocol: UDP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 67
            name: client-udp
            protocol: UDP
          livenessProbe:
            httpGet:
              path: /
              port: http
              initialDelaySeconds: 120
          readinessProbe:
            httpGet:
              path: /
              port: http
              initialDelaySeconds: 120
          volumeMounts:
          - mountPath: /etc/pihole
            name: config
          - mountPath: /etc/dnsmasq.d/02-custom.conf
            name: custom-dnsmasq
            subPath: 02-custom.conf
          {{ if .Values.adlists }}
          - mountPath: /etc/pihole/adlists.list
            name: adlists
            subPath: adlists.list
          {{ end }}          
          {{ if .Values.blacklist }}
          - mountPath: /etc/pihole/blacklist.txt
            name: blacklist
            subPath: blacklist.txt
          {{ end }}
          {{ if .Values.whitelist }}
          - mountPath: /etc/pihole/whitelist.txt
            name: whitelist
            subPath: whitelist.txt
          {{ end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: config
        {{- if .Values.persistentVolumeClaim.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "pihole.fullname" . }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      - configMap:
          defaultMode: 420
          name: {{ template "pihole.fullname" . }}-custom-dnsmasq
        name: custom-dnsmasq
      - configMap:
          defaultMode: 420
          name: {{ template "pihole.fullname" . }}-adlists
        name: adlists
      - configMap:
          defaultMode: 420
          name: {{ template "pihole.fullname" . }}-whitelist
        name: whitelist
      - configMap:
          defaultMode: 420
          name: {{ template "pihole.fullname" . }}-blacklist
        name: blacklist
